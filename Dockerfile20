# Machine Learning Dockerfile 
#
# https://github.com/tamboraorg/docker/creml
#

# Pull base image.
FROM credocker/crepython:2020.0

#https://www.tensorflow.org/install/lang_c
#https://www.tensorflow.org/install 

MAINTAINER Michael Kahle <michael.kahle@yahoo.de>

ARG BUILD_YEAR=2020
ARG BUILD_MONTH=0
ARG BUILD_TAG=latest

ENV PROCESSOR_MODE CPU   # 'GPU' or 'CPU'
ENV NVIDIA_VERSION 470

# version: yyyy.n for stable versions / 0.yyyy for development
#ENV DEBIAN_FRONTEND noninteractive 
#ENV INITRD No
#ENV LANG en_US.UTF-8
#ENV TENSORFLOW_VERSION 1.14.0 
ENV TENSORFLOW_VERSION 2.11.0

LABEL Name="ML for CRE" \
      CRE=$CRE_VERSION \ 
      Year=$BUILD_YEAR \
      Month=$BUILD_MONTH \
      Version=$TENSORFLOW_VERSION \
      OS="Ubuntu:$UBUNTU_VERSION" \
      Build_=$BUILD_TAG 

# install GPU driver
# https://www.linuxbabe.com/ubuntu/install-nvidia-driver-ubuntu-18-04
RUN add-apt-repository ppa:graphics-drivers/ppa
RUN apt-get  -y --no-install-recommends install ubuntu-drivers-common
RUN ubuntu-drivers devices
#RUN ubuntu-drivers autoinstall
RUN apt-get  -y --no-install-recommends install nvidia-driver-$NVIDIA_VERSION
#RUN apt-get -y --no-install-recommends install nvidia-$NVIDIA_VERSION

# install OpenBlas
RUN apt-get  -y --no-install-recommends install libopenblas-dev liblapack-dev
#cmake pkg-config 

WORKDIR /cre/

RUN pip3 install --upgrade pip
# 2.11
RUN pip3 install tensorflow~=2.11
RUN pip3 install tensorboard tensorboard_logger

RUN pip3 install spark-nlp==3.1.1 pyspark==3.1.1
#RUN pip3 install spark-nlp pyspark 
#0.24 
RUN pip3 install scikit-spark~=0.4 scikit-learn~=0.24
#RUN apt-get install python3-sklearn python3-sklearn-lib
RUN pip3 install wpca xeofs

# https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-2.3.0.tar.gz
# https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.3.0.tar.gz

RUN curl https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-$TENSORFLOW_VERSION.tar.gz > /cre/libtensorflow-linux-x86_64.tar.gz && \
    tar -C /usr/local -xzf /cre/libtensorflow-linux-x86_64.tar.gz && \
    rm -f /cre/libtensorflow-linux-x86_64.tar.gz
RUN ldconfig


## Install AutoML sklearn
#
## Requirements
#pytest>=4.6
#*#Cython
#scikit-learn>=0.22.0,<0.23
#lockfile
#joblib
#pyyaml
#liac-arff
#*#ConfigSpace>=0.4.0,<0.5
#pynisher>=0.4.2
#pyrfr>=0.7,<0.9
#smac>=0.12
#
#DONE#setuptools
#DONE#psutil
#DONE#numpy>=1.9.0
#DONE#scipy>=0.14.1
#DONE#pandas<1.0
#
RUN curl https://raw.githubusercontent.com/automl/auto-sklearn/master/requirements.txt | xargs -n 1 -L 1 pip3 install
RUN pip3 install auto-sklearn

## PyTorch:  https://pytorch.org
#RUN pip3 install torch torchvision
# https://github.com/PyTorchLightning/pytorch-lightning
#RUN pip3 install pytorch-lightning

## Install AutoML PyTorch
## Requirements
#netifaces
#statsmodels
#imblearn
#hpbandster
#fasteners
#torch
#torchvision
#tensorboard_logger
#openml
#lightgbm
#catboost
##

## Auto PyTOrch runs in 20.04 only...
# RUN curl https://raw.githubusercontent.com/automl/Auto-PyTorch/master/requirements.txt | xargs -n 1 -L 1 pip3 install
# RUN mkdir -p /cre && cd /cre && git clone https://github.com/automl/Auto-PyTorch.git && cd Auto-PyTorch && python3 setup.py install && cd /cre 

# AutoKeras
# https://machinelearningmastery.com/autokeras-for-classification-and-regression/
RUN pip3 install keras autokeras

# spaCy
# https://spacy.io
# https://github.com/explosion/spaCy
# https://spacy.io/universe/project/sense2vec
# https://github.com/explosion/sense2vec
RUN pip3 install spacy==2.2.4
RUN pip3 install sense2vec==1.0.3

# RUN python3 -m spacy download en_core_web_sm
# RUN python3 -m spacy download de_core_news_sm
# RUN python3 -m spacy download xx_ent_wiki_sm

#RUN python3 -m spacy download fr_core_news_sm french
#python3 -m spacy download el_core_news_sm   greek
#python3 -m spacy download zh_core_web_sm    chinese

#python3 -m spacy download en_core_web_trf  #accurate
#python3 -m spacy download de_dep_news_trf  #accurate

# Add stanza 
# https://stanfordnlp.github.io/stanza/
# https://github.com/stanfordnlp/stanza
## RUN pip3 install stanza

# Add Image AI
# https://github.com/OlafenwaMoses/ImageAI
# https://towardsdatascience.com/how-to-create-a-simple-object-detection-system-with-python-and-imageai-ee1bcaf6b111
## RUN pip3 install imageai

# Add TorchFusion
# https://github.com/johnolafenwa/TorchFusion
# RUN pip3 install torchfusion 

# Add xgboost
# https://xgboost.readthedocs.io/en/stable/install.html
RUN pip3 install xgboost
#R: install.packages("xgboost")
#Julia: https://github.com/dmlc/XGBoost.jl
# add XGBoost

# Add ivy
# https://github.com/unifyai/ivy
# https://lets-unify.ai/ivy/
RUN pip3 install ivy

# https://ui.neptune.ai
RUN pip3 install neptune-client

RUN pip3 list

# Freeze python requirements here:
RUN mkdir -p /cre && \ 
    pip3 freeze --no-cache-dir > /cre/requirements.txt.orig

RUN mkdir -p /cre && touch /cre/versions.txt && \ 
   echo "$(date +'%F %R') \t creML \t $TENSORFLOW_VERSION" >> /cre/versions.txt && \ 
   echo "$(date +'%F %R') \t  torch \t $(python3 -c 'import torch; print(torch.__version__)')" >> /cre/versions.txt && \
   echo "$(date +'%F %R') \t  $(pip3 list | grep 'tensorflow ')" >> /cre/versions.txt && \ 
   echo "$(date +'%F %R') \t  keras \t $(python3 -c 'import keras; print(keras.__version__)')" 2>nul >> /cre/versions.txt && \
   echo "$(date +'%F %R') \t  sklearn \t $(python3 -c 'import sklearn; print(sklearn.__version__)')" >> /cre/versions.txt




COPY cre /cre


#EXPOSE 8000

ENTRYPOINT ["/cre/ml-entrypoint.sh"]
CMD ["shoreman", "/cre/coding-procfile"]

#CMD ["/usr/bin/sleep", "1000000"]
